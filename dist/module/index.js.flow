// @flow

declare class Class1 {
  static $call(message?: string): Class1;
  static captureStackTrace(target: Object, constructor?: Function): void;
  static prepareStackTrace: (err: Class1, stack: Array<CallSite>) => mixed;
  static stackTraceLimit: number;

  columnNumber?: number;
  description?: string;
  fileName?: string;
  lineNumber?: number;
  message: string;
  name: string;
  number?: number;
  stack: string;
  constructor(message?: mixed): void;
  toString(): string;
}
declare class Class0 {
  static all<X: [mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | Array<mixed>>(promises: X): Class0<mixed /* UNEXPECTED TYPE: EvalT */>;
  static delay(delay: number): Class0<void>;
  static flush(): Class0<void>;
  static flushQueue(): any;
  static hash<O: {[_: string]: mixed /* UNEXPECTED TYPE: ExistsT */}>(promises: O): Class0<mixed /* UNEXPECTED TYPE: EvalT */>;
  static isPromise(value: mixed): boolean;
  static map<T, X>(items: Array<T>, method: (_: T) => Class0<X> | X): Class0<Array<X>>;
  static onPossiblyUnhandledException(handler: (err: mixed) => void): {cancel: () => void};
  static reject(error: mixed): Class0<R>;
  static resolve<X>(value: X | Class0<X>): Class0<X>;
  static try<X, Y, C, A: Array<mixed>>(method: (...args: A) => Class0<X> | Y, context: ?C, args: ?A): Class0<X | Y>;

  dispatching: boolean;
  error: mixed;
  errorHandled: boolean;
  handlers: Array<{onError: void | (error: mixed) => mixed, onSuccess: void | (result: R) => mixed, promise: Class0<mixed /* UNEXPECTED TYPE: ExistsT */>}>;
  rejected: boolean;
  resolved: boolean;
  stack: string;
  value: R;
  asyncReject(error: mixed): any;
  catch<X, Y>(onError: (error: mixed) => Class0<X> | Y): Class0<X | Y>;
  constructor(handler: ?(resolve: (result: R) => void, reject: (error: mixed) => void) => void): any;
  dispatch(): any;
  finally(onFinally: () => mixed): Class0<R>;
  reject(error: mixed): Class0<R>;
  resolve(result: R): Class0<R>;
  then<X, Y>(onSuccess: void | (result: R) => Class0<X> | Y, onError: void | (error: mixed) => Class0<X> | Y): Class0<X | Y>;
  timeout(time: number, err: ?Class1): Class0<R>;
  toPromise(): Class<Promise<R>> | Class<Promise> | Promise<+R>;
}
declare class Class2 extends HTMLElement {

  async: boolean;
  charset: string;
  crossOrigin?: string;
  defer: boolean;
  src: string;
  text: string;
  type: string;
}
declare export var CLIENT_ID_ALIAS: {sb: string};
export type ExportsType = {[_: string]: mixed};
export type FundingEligibilityType = {bancontact: {branded: boolean, eligible: boolean}, card: {branded: boolean, eligible: boolean, vendors: {amex: {eligible: boolean}, cup: {eligible: boolean}, discover: {eligible: boolean}, elo: {eligible: boolean}, hiper: {eligible: boolean}, jcb: {eligible: boolean}, mastercard: {eligible: boolean}, visa: {eligible: boolean}}}, credit: {branded: boolean, eligible: boolean}, eps: {branded: boolean, eligible: boolean}, giropay: {branded: boolean, eligible: boolean}, ideal: {branded: boolean, eligible: boolean}, mybank: {branded: boolean, eligible: boolean}, p24: {branded: boolean, eligible: boolean}, paypal: {branded: boolean, eligible: boolean}, sepa: {branded: boolean, eligible: boolean}, sofort: {branded: boolean, eligible: boolean}, venmo: {branded: boolean, eligible: boolean}, wechatpay: {branded: boolean, eligible: boolean}, zimpler: {branded: boolean, eligible: boolean}};
export type QueryOptionsType = {components: Array<string>, env: string, locale: {country: string, lang: string}, merchantID: string};
declare export function buildPayPalAPIUrl(path?: string): string;
declare export function buildPayPalUrl(path?: string): string;
declare export function getAPIStageHost(): string;
declare export function getClientID(): string;
declare export function getClientToken(): string;
declare export function getCommit(): mixed /* UNEXPECTED TYPE: EvalT */;
declare export function getCorrelationID(): string;
declare export function getCountry(): mixed /* UNEXPECTED TYPE: EvalT */;
declare export function getCurrency(): mixed /* UNEXPECTED TYPE: EvalT */;
declare export function getDefaultStageHost(): string;
declare export function getEnv(): mixed /* UNEXPECTED TYPE: EvalT */;
declare export function getHost(): string;
declare export function getHostName(): string;
declare export function getIntent(): mixed /* UNEXPECTED TYPE: EvalT */;
declare export function getLang(): mixed /* UNEXPECTED TYPE: EvalT */;
declare export function getLocale(): {country: mixed /* UNEXPECTED TYPE: EvalT */, lang: mixed /* UNEXPECTED TYPE: EvalT */};
declare export function getLogger(): {addHeaderBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, addMetaBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, addPayloadBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, addTrackingBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, debug: (name: string, payload?: {[_: string]: ?string}) => void, error: (name: string, payload?: {[_: string]: ?string}) => void, flush: () => Class0<void>, immediateFlush: () => Class0<void>, info: (name: string, payload?: {[_: string]: ?string}) => void, setTransport: (_: (_: {headers: {[_: string]: string}, json: Object, method: string, url: string}) => Class0<void>) => void, track: (payload: {[_: string]: ?string}) => void, warn: (name: string, payload?: {[_: string]: ?string}) => void};
declare export function getMerchantID(): ?string;
declare export function getPartnerAttributionID(): ?string;
declare export function getPath(): string;
declare export function getPayPalAPIDomain(): string;
declare export function getPayPalDomain(): string;
declare export function getPayPalLoggerDomain(): string;
declare export function getPayPalLoggerUrl(): string;
declare export function getPaymentsSDKStorage(): {getID: () => string, getSessionID: () => string, getSessionState: <any>(handler: (_: Object) => T) => T, getState: <any>(handler: (_: Object) => T) => T};
declare export function getPort(): number;
declare export function getSDKAttribute<T: string | void>(name: mixed /* UNEXPECTED TYPE: EvalT */, def: T): T;

declare export function getSDKAttributes(): {[_: string]: string};
declare export function getSDKQueryParam<T: string | void>(name: mixed /* UNEXPECTED TYPE: EvalT */, def: T): T;

declare export function getSDKQueryParamBool<T: boolean>(name: mixed /* UNEXPECTED TYPE: EvalT */, def?: T): T;

declare export function getSDKQueryParams(): {[_: string]: string};
declare export function getSDKScript(): Class2;
declare export function getSessionID(): string;
declare export function getStageHost(): string;
declare export function getVault(): mixed /* UNEXPECTED TYPE: EvalT */;
declare export function getVersion(): string;
declare export function setupLogger(): void;
