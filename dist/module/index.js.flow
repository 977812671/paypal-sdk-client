// @flow

declare class Class1 {
  static $call(message?: string): Class1;
  static captureStackTrace(target: Object, constructor?: Function): void;
  static prepareStackTrace: (err: Class1, stack: Array<CallSite>) => mixed;
  static stackTraceLimit: number;

  columnNumber?: number;
  description?: string;
  fileName?: string;
  lineNumber?: number;
  message: string;
  name: string;
  number?: number;
  stack: string;
  constructor(message?: mixed): void;
  toString(): string;
}
declare class Class0 {
  static all<X: [mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | [mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */, mixed /* UNEXPECTED TYPE: ExistsT */] | Array<mixed>>(promises: X): Class0<mixed /* UNEXPECTED TYPE: EvalT */>;
  static delay(delay: number): Class0<void>;
  static flush(): Class0<void>;
  static flushQueue(): any;
  static hash<O: {[_: string]: mixed /* UNEXPECTED TYPE: ExistsT */}>(promises: O): Class0<mixed /* UNEXPECTED TYPE: EvalT */>;
  static isPromise(value: mixed): boolean;
  static map<T, X>(items: Array<T>, method: (_: T) => Class0<X> | X): Class0<Array<X>>;
  static onPossiblyUnhandledException(handler: (err: mixed) => void): {cancel: () => void};
  static reject(error: mixed): Class0<R>;
  static resolve<X>(value: X | Class0<X>): Class0<X>;
  static try<X, Y, C, A: Array<mixed>>(method: (...args: A) => Class0<X> | Y, context: ?C, args: ?A): Class0<X | Y>;

  dispatching: boolean;
  error: mixed;
  errorHandled: boolean;
  handlers: Array<{onError: void | (error: mixed) => mixed, onSuccess: void | (result: R) => mixed, promise: Class0<mixed /* UNEXPECTED TYPE: ExistsT */>}>;
  rejected: boolean;
  resolved: boolean;
  value: R;
  asyncReject(error: mixed): any;
  catch<X, Y>(onError: (error: mixed) => Class0<X> | Y): Class0<X | Y>;
  constructor(handler: ?(resolve: (result: R) => void, reject: (error: mixed) => void) => void): any;
  dispatch(): any;
  finally(handler: () => mixed): Class0<R>;
  reject(error: mixed): Class0<R>;
  resolve(result: R): Class0<R>;
  then<X, Y>(onSuccess: void | (result: R) => Class0<X> | Y, onError: void | (error: mixed) => Class0<X> | Y): Class0<X | Y>;
  timeout(time: number, err: ?Class1): Class0<R>;
  toPromise(): Class<Promise<R>> | Class<Promise> | Promise<+R>;
}
declare export var COUNTRY: {AD: "AD", AE: "AE", AG: "AG", AI: "AI", AL: "AL", AM: "AM", AN: "AN", AO: "AO", AR: "AR", AT: "AT", AU: "AU", AW: "AW", AZ: "AZ", BA: "BA", BB: "BB", BE: "BE", BF: "BF", BG: "BG", BH: "BH", BI: "BI", BJ: "BJ", BM: "BM", BN: "BN", BO: "BO", BR: "BR", BS: "BS", BT: "BT", BW: "BW", BY: "BY", BZ: "BZ", CA: "CA", CD: "CD", CG: "CG", CH: "CH", CI: "CI", CK: "CK", CL: "CL", CM: "CM", CN: "CN", CO: "CO", CR: "CR", CV: "CV", CY: "CY", CZ: "CZ", DE: "DE", DJ: "DJ", DK: "DK", DM: "DM", DO: "DO", DZ: "DZ", EC: "EC", EE: "EE", EG: "EG", ER: "ER", ES: "ES", ET: "ET", FI: "FI", FJ: "FJ", FK: "FK", FM: "FM", FO: "FO", FR: "FR", GA: "GA", GB: "GB", GD: "GD", GE: "GE", GF: "GF", GI: "GI", GL: "GL", GM: "GM", GN: "GN", GP: "GP", GR: "GR", GT: "GT", GW: "GW", GY: "GY", HK: "HK", HN: "HN", HR: "HR", HU: "HU", ID: "ID", IE: "IE", IL: "IL", IN: "IN", IS: "IS", IT: "IT", JM: "JM", JO: "JO", JP: "JP", KE: "KE", KG: "KG", KH: "KH", KI: "KI", KM: "KM", KN: "KN", KR: "KR", KW: "KW", KY: "KY", KZ: "KZ", LA: "LA", LC: "LC", LI: "LI", LK: "LK", LS: "LS", LT: "LT", LU: "LU", LV: "LV", MA: "MA", MC: "MC", MD: "MD", ME: "ME", MG: "MG", MH: "MH", MK: "MK", ML: "ML", MN: "MN", MQ: "MQ", MR: "MR", MS: "MS", MT: "MT", MU: "MU", MV: "MV", MW: "MW", MX: "MX", MY: "MY", MZ: "MZ", NA: "NA", NC: "NC", NE: "NE", NF: "NF", NG: "NG", NI: "NI", NL: "NL", NO: "NO", NP: "NP", NR: "NR", NU: "NU", NZ: "NZ", OM: "OM", PA: "PA", PE: "PE", PF: "PF", PG: "PG", PH: "PH", PL: "PL", PM: "PM", PN: "PN", PT: "PT", PW: "PW", PY: "PY", QA: "QA", RE: "RE", RO: "RO", RS: "RS", RU: "RU", RW: "RW", SA: "SA", SB: "SB", SC: "SC", SE: "SE", SG: "SG", SH: "SH", SI: "SI", SJ: "SJ", SK: "SK", SL: "SL", SM: "SM", SN: "SN", SO: "SO", SR: "SR", ST: "ST", SV: "SV", SZ: "SZ", TC: "TC", TD: "TD", TG: "TG", TH: "TH", TJ: "TJ", TM: "TM", TN: "TN", TO: "TO", TR: "TR", TT: "TT", TV: "TV", TW: "TW", TZ: "TZ", UA: "UA", UG: "UG", US: "US", UY: "UY", VA: "VA", VC: "VC", VE: "VE", VG: "VG", VN: "VN", VU: "VU", WF: "WF", WS: "WS", YE: "YE", YT: "YT", ZA: "ZA", ZM: "ZM", ZW: "ZW"};
declare export var COUNTRY_LANGS: {[_: mixed /* UNEXPECTED TYPE: EvalT */]: Array<mixed /* UNEXPECTED TYPE: EvalT */>};
export type ClientOptionsType = {auth?: {[_: string]: string}, env: string};
export type CountryLangs = {AD: "en" | "fr" | "es" | "zh", AE: "en" | "fr" | "es" | "zh" | "ar", AG: "en" | "fr" | "es" | "zh", AI: "en" | "fr" | "es" | "zh", AL: "en", AM: "en" | "fr" | "es" | "zh", AN: "en" | "fr" | "es" | "zh", AO: "en" | "fr" | "es" | "zh", AR: "es" | "en", AT: "de" | "en", AU: "en", AW: "en" | "fr" | "es" | "zh", AZ: "en" | "fr" | "es" | "zh", BA: "en", BB: "en" | "fr" | "es" | "zh", BE: "en" | "nl" | "fr", BF: "fr" | "en" | "es" | "zh", BG: "en", BH: "ar" | "en" | "fr" | "es" | "zh", BI: "fr" | "en" | "es" | "zh", BJ: "fr" | "en" | "es" | "zh", BM: "en" | "fr" | "es" | "zh", BN: "en", BO: "es" | "en" | "fr" | "zh", BR: "pt" | "en", BS: "en" | "fr" | "es" | "zh", BT: "en", BW: "en" | "fr" | "es" | "zh", BY: "en", BZ: "en" | "es" | "fr" | "zh", CA: "en" | "fr", CD: "fr" | "en" | "es" | "zh", CG: "en" | "fr" | "es" | "zh", CH: "de" | "fr" | "en", CI: "fr" | "en", CK: "en" | "fr" | "es" | "zh", CL: "es" | "en" | "fr" | "zh", CM: "fr" | "en", CN: "zh", CO: "es" | "en" | "fr" | "zh", CR: "es" | "en" | "fr" | "zh", CV: "en" | "fr" | "es" | "zh", CY: "en", CZ: "cs" | "en" | "fr" | "es" | "zh", DE: "de" | "en", DJ: "fr" | "en" | "es" | "zh", DK: "da" | "en", DM: "en" | "fr" | "es" | "zh", DO: "es" | "en" | "fr" | "zh", DZ: "ar" | "en" | "fr" | "es" | "zh", EC: "es" | "en" | "fr" | "zh", EE: "en" | "ru" | "fr" | "es" | "zh", EG: "ar" | "en" | "fr" | "es" | "zh", ER: "en" | "fr" | "es" | "zh", ES: "es" | "en", ET: "en" | "fr" | "es" | "zh", FI: "fi" | "en" | "fr" | "es" | "zh", FJ: "en" | "fr" | "es" | "zh", FK: "en" | "fr" | "es" | "zh", FM: "en", FO: "da" | "en" | "fr" | "es" | "zh", FR: "fr" | "en", GA: "fr" | "en" | "es" | "zh", GB: "en", GD: "en" | "fr" | "es" | "zh", GE: "en" | "fr" | "es" | "zh", GF: "en" | "fr" | "es" | "zh", GI: "en" | "fr" | "es" | "zh", GL: "da" | "en" | "fr" | "es" | "zh", GM: "en" | "fr" | "es" | "zh", GN: "fr" | "en" | "es" | "zh", GP: "en" | "fr" | "es" | "zh", GR: "el" | "en" | "fr" | "es" | "zh", GT: "es" | "en" | "fr" | "zh", GW: "en" | "fr" | "es" | "zh", GY: "en" | "fr" | "es" | "zh", HK: "en" | "zh", HN: "es" | "en" | "fr" | "zh", HR: "en", HU: "hu" | "en" | "fr" | "es" | "zh", ID: "id" | "en", IE: "en" | "fr" | "es" | "zh", IL: "he" | "en", IN: "en", IS: "en", IT: "it" | "en", JM: "en" | "es" | "fr" | "zh", JO: "ar" | "en" | "fr" | "es" | "zh", JP: "ja" | "en", KE: "en" | "fr" | "es" | "zh", KG: "en" | "fr" | "es" | "zh", KH: "en", KI: "en" | "fr" | "es" | "zh", KM: "fr" | "en" | "es" | "zh", KN: "en" | "fr" | "es" | "zh", KR: "ko" | "en", KW: "ar" | "en" | "fr" | "es" | "zh", KY: "en" | "fr" | "es" | "zh", KZ: "en" | "fr" | "es" | "zh", LA: "en", LC: "en" | "fr" | "es" | "zh", LI: "en" | "fr" | "es" | "zh", LK: "en", LS: "en" | "fr" | "es" | "zh", LT: "en" | "ru" | "fr" | "es" | "zh", LU: "en" | "de" | "fr" | "es" | "zh", LV: "en" | "ru" | "fr" | "es" | "zh", MA: "ar" | "en" | "fr" | "es" | "zh", MC: "fr" | "en", MD: "en", ME: "en", MG: "en" | "fr" | "es" | "zh", MH: "en" | "fr" | "es" | "zh", MK: "en", ML: "fr" | "en" | "es" | "zh", MN: "en", MQ: "en" | "fr" | "es" | "zh", MR: "en" | "fr" | "es" | "zh", MS: "en" | "fr" | "es" | "zh", MT: "en", MU: "en" | "fr" | "es" | "zh", MV: "en", MW: "en" | "fr" | "es" | "zh", MX: "es" | "en", MY: "en", MZ: "en" | "fr" | "es" | "zh", NA: "en" | "fr" | "es" | "zh", NC: "en" | "fr" | "es" | "zh", NE: "fr" | "en" | "es" | "zh", NF: "en" | "fr" | "es" | "zh", NG: "en", NI: "es" | "en" | "fr" | "zh", NL: "nl" | "en", NO: "no" | "en", NP: "en", NR: "en" | "fr" | "es" | "zh", NU: "en" | "fr" | "es" | "zh", NZ: "en" | "fr" | "es" | "zh", OM: "ar" | "en" | "fr" | "es" | "zh", PA: "es" | "en" | "fr" | "zh", PE: "es" | "en" | "fr" | "zh", PF: "en" | "fr" | "es" | "zh", PG: "en" | "fr" | "es" | "zh", PH: "en", PL: "pl" | "en", PM: "en" | "fr" | "es" | "zh", PN: "en" | "fr" | "es" | "zh", PT: "pt" | "en", PW: "en" | "fr" | "es" | "zh", PY: "es" | "en", QA: "en" | "fr" | "es" | "zh" | "ar", RE: "en" | "fr" | "es" | "zh", RO: "en" | "fr" | "es" | "zh", RS: "en" | "fr" | "es" | "zh", RU: "ru" | "en", RW: "fr" | "en" | "es" | "zh", SA: "ar" | "en" | "fr" | "es" | "zh", SB: "en" | "fr" | "es" | "zh", SC: "fr" | "en" | "es" | "zh", SE: "sv" | "en", SG: "en", SH: "en" | "fr" | "es" | "zh", SI: "en" | "fr" | "es" | "zh", SJ: "en" | "fr" | "es" | "zh", SK: "sk" | "en" | "fr" | "es" | "zh", SL: "en" | "fr" | "es" | "zh", SM: "en" | "fr" | "es" | "zh", SN: "fr" | "en" | "es" | "zh", SO: "en" | "fr" | "es" | "zh", SR: "en" | "fr" | "es" | "zh", ST: "en" | "fr" | "es" | "zh", SV: "es" | "en" | "fr" | "zh", SZ: "en" | "fr" | "es" | "zh", TC: "en" | "fr" | "es" | "zh", TD: "fr" | "en" | "es" | "zh", TG: "fr" | "en" | "es" | "zh", TH: "th" | "en", TJ: "en" | "fr" | "es" | "zh", TM: "en" | "fr" | "es" | "zh", TN: "ar" | "en" | "fr" | "es" | "zh", TO: "en", TR: "tr" | "en", TT: "en" | "fr" | "es" | "zh", TV: "en" | "fr" | "es" | "zh", TW: "zh" | "en", TZ: "en" | "fr" | "es" | "zh", UA: "en" | "ru" | "fr" | "es" | "zh", UG: "en" | "fr" | "es" | "zh", US: "en" | "fr" | "es" | "zh", UY: "es" | "en" | "fr" | "zh", VA: "en" | "fr" | "es" | "zh", VC: "en" | "fr" | "es" | "zh", VE: "es" | "en" | "fr" | "zh", VG: "en" | "fr" | "es" | "zh", VN: "en", VU: "en" | "fr" | "es" | "zh", WF: "en" | "fr" | "es" | "zh", WS: "en", YE: "ar" | "en" | "fr" | "es" | "zh", YT: "en" | "fr" | "es" | "zh", ZA: "en" | "fr" | "es" | "zh", ZM: "en" | "fr" | "es" | "zh", ZW: "en"};
declare export var DEFAULT_ENV: "production";
declare export var ENV: {DEMO: "demo", LOCAL: "local", PRODUCTION: "production", SANDBOX: "sandbox", STAGE: "stage", TEST: "test"};
export type ExportsType = {[_: string]: mixed};
declare export var FPTI_DATA_SOURCE: {PAYMENTS_SDK: "payments_sdk"};
declare export var FPTI_FEED: {PAYMENTS_SDK: "payments_sdk"};
declare export var FPTI_KEY: {BUTTON_LAYOUT: "button_layout", BUTTON_SESSION_UID: "button_session_id", BUTTON_SOURCE: "button_source", BUTTON_TYPE: "button_type", CHOSEN_FUNDING: "selected_payment_method", CLIENT_ID: "client_id", CONTEXT_ID: "context_id", CONTEXT_TYPE: "context_type", DATA_SOURCE: "serverside_data_source", ERROR_CODE: "ext_error_code", ERROR_DESC: "ext_error_desc", EXPERIMENT_NAME: "pxp_exp_id", FEED: "feed_name", FUNDING_COUNT: "eligible_payment_count", FUNDING_LIST: "eligible_payment_methods", PAGE_LOAD_TIME: "page_load_time", PAY_ID: "pay_id", REFERER: "referer_url", SELLER_ID: "seller_id", SESSION_UID: "page_session_id", STATE: "state_name", TOKEN: "token", TRANSITION: "transition_name", TRANSITION_TIME: "transition_time", TREATMENT_NAME: "pxp_trtmnt_id", VERSION: "checkoutjs_version"};
export type FundingEligibilityType = {bancontact: {branded: boolean, eligible: boolean}, card: {branded: boolean, eligible: boolean, vendors: {amex: {eligible: boolean}, discover: {eligible: boolean}, elo: {eligible: boolean}, hiper: {eligible: boolean}, jcb: {eligible: boolean}, mastercard: {eligible: boolean}, visa: {eligible: boolean}}}, credit: {branded: boolean, eligible: boolean}, eps: {branded: boolean, eligible: boolean}, giropay: {branded: boolean, eligible: boolean}, ideal: {branded: boolean, eligible: boolean}, mybank: {branded: boolean, eligible: boolean}, p24: {branded: boolean, eligible: boolean}, paypal: {branded: boolean, eligible: boolean}, sepa: {branded: boolean, eligible: boolean}, sofort: {branded: boolean, eligible: boolean}, venmo: {branded: boolean, eligible: boolean}, wechatpay: {branded: boolean, eligible: boolean}, zimpler: {branded: boolean, eligible: boolean}};
declare export var GLOBAL_KEY: string;
declare export var GLOBAL_NAMESPACE: string;
declare export var LANG: {AR: "ar", CS: "cs", DA: "da", DE: "de", EL: "el", EN: "en", ES: "es", FI: "fi", FR: "fr", HE: "he", HU: "hu", ID: "id", IT: "it", JA: "ja", KO: "ko", NL: "nl", NO: "no", PL: "pl", PT: "pt", RU: "ru", SK: "sk", SV: "sv", TH: "th", TR: "tr", ZH: "zh"};
export type LocaleType = {country: mixed /* UNEXPECTED TYPE: EvalT */, lang: mixed /* UNEXPECTED TYPE: EvalT */};
export type QueryOptionsType = {components: Array<string>, env: string, locale: {country: string, lang: string}, merchantID: string};
export type SDKGlobalType = {queryOptions: {components: Array<string>, env: string, locale: {country: string, lang: string}, merchantID: string}};
declare export var URLS: any;
declare export function attach(moduleName: string, exportBuilder: (_: {clientOptions: {auth?: {[_: string]: string}, env: string}}) => {[_: string]: mixed}): void;
declare export function getSessionID(): string;
declare export var logger: {addHeaderBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, addMetaBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, addPayloadBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, addTrackingBuilder: (_: (_: {[_: string]: string}) => {[_: string]: ?string}) => void, debug: (name: string, payload?: {[_: string]: ?string}) => void, error: (name: string, payload?: {[_: string]: ?string}) => void, flush: () => Class0<void>, immediateFlush: () => Class0<void>, info: (name: string, payload?: {[_: string]: ?string}) => void, setTransport: (_: (_: {headers: {[_: string]: string}, json: Object, method: string, url: string}) => Class0<void>) => void, track: (payload: {[_: string]: ?string}) => void, warn: (name: string, payload?: {[_: string]: ?string}) => void};
